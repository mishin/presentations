# This is a sample Vroom input file. It should help you get started.
#
# Edit this file with your content. Then run `vroom --vroom` to start
# the show!
#
# See `perldoc Vroom` for complete details.
#
---- config
# Basic config options.
title: Open42 Git Intro
indent: 5
height: 10 
width: 100
skip: 0

# The following options are for Gvim usage.
# vim: gvim
# gvimrc: |
#   set fuopt=maxhorz,maxvert
#   set guioptions=egmLtT
#   set guifont=Bitstream_Vera_Sans_Mono:h18
#   set guicursor=a:blinkon0-ver25-Cursor
#   colorscheme default
vimrc: |
  let g:space_loaded = 1 "disable magic-space: space.vim

---- center


Git Intro
Open42


2011-Mar-11

----
== Topics

  * What is git?
  * Minimal local git
  * git model
  * git vs svn
  * git examples
  * github
  * further Reading

----
== Topics

  * What is git?
  * Minimal local git
  * git model
  * git vs svn
    * overview
    * things you should know
    * flow comparison
    * command comparison
  * git examples
    * branch and tag
    * merge
    * rebase
    * bisect
  * github
  * further Reading
    * git-v-svn crash course
    * git user-manual

----
== What is git?

  Git is a distributed revision control system.
  It was written for the needs of the linux kernel team:
    * distributed offline users
    * patches by email
    * easy branching
    * efficient easy merging
    * fast

---- shell
== Minimal local git 

 cd top-level-of-project
 git init                          # initialize local repository
 touch new-file                    # create new file
 git add new-file                  # stage file for commit
 git commit                        # commit changes
 git status                        # show modified and untracked files in repo
 git add file1 file2 ...           # stage more files
 git commit                        # commit more changes

----
== Git Model

  * every copy is a complete repository
  * central authoritative repository is only for convention
  * Flow:
    clone remote repository to local copy, 
    make changes locally, 
    push changes back to remote.

----
== Git vs SVN 
== High-level overview

  * SVN stores trees of files
  * Git stores a series of patches that apply to a tree of files

+ * With enough metadata these are equivalent.  
  * In practice, merges are easier with the latter.
  * Theory of patches:
    http://darcs.net/manual/node9.html
----
== Git vs SVN
== Things you should know.

----
== Things you should know: Repositories

    SVN: one master remote repository.

    git: every copy of the project has a full repository,
         central master only by convention.

----
== Things you should know: URL

    SVN: identifies location of the repo and the path within.
         user convention for branches, tags, sub-projects.

    git: identifies location of the repo.  Fixed locations inside
         for branches, tags.  On branch is default, generally 
         "master"

+ You can't check out part of a git repository like you can with subversion.

----

== Things you should know: Revisions

    SVN: marked with ids of decimal numbers growing monotonically

    git: marked with SHA1 ids, 160 bit
+
       * HEAD, HEAD^, HEAD^^ shorthand for head, head-parent, head-parent-parent
         * can keep adding ^^^ mark to go farther up the chain
       * git tool can work with a unique sub-string of revision id.
       
       * gitk is a curses viewer of commit history.
         $ aptitude install gitk



== 
----

== Things you should know: Commits

    git: Each commit has an author and committer field to record who made the 
    change and who added it to the repository.  This helps with patches from email.

    check settings with
      git config -l


    set with:
      git config --global user.name "Your Name"
      git config --global user.email username@open42.com



== 
----

== Things you should know: Commit Message

   By convention, the first line of the git message is a brief description of the patch
   This can be expanded in later paragraphs.  Many tools use the first line of the patch
   as a description.

   We should embed ticket number in the first line of commit message.
+
   example:
     [t:123] enable baz for bar when foo

     * baz only makes sense if foo
     * unit test expanded to check for non-sensical baz without foo case.


== 
----

== Things you should know: Git Commands

  * Git commands are of the form "git command", 
    "git-command" is equivalent (and useful for man pages)











== 
----

== Things you should know: Colors

  * disabled by default, enable with git config.
    People who don't like colors are much louder when annoyed than
    people who like colors.

   git config --global color.diff   auto
   git config --global color.status auto
   git config --global color.branch auto






== 
----
== Git vs SVN Command Flow Comparison

   SVN vs Git checkout from remote repository










== 
---- shell
== SVN checkout from remote repository

 svn checkout REPO_URL LOCAL_DIR   # make local checkout
 cd LOCAL_DIR                      # cd to versioned directory
 <modify files>
 svn stat                          # check status of files, modified
 svn diff                          # show diff from checkout
 svn commit                        # push all changes to the repo





== 
---- shell
== Git checkout from remote repository

 git clone REPO_URL LOCAL_DIR      # make local checkout
 cd LOCAL_DIR                      # cd to versioned directory
 git pull                          # pull changes from remote repo
 <modify files>
 git status                        # check status of files, modified
 git diff                          # show diff from checkout
 git add                           # stage files for commit
 git diff                          # staged changes are not listed
 git commit                        # commit changes to local repo
 git push origin master            # push local repo changes back to 
                                   # remote repo (origin) on branch (master)
== 
---- center


Git Examples

---- shell
== Git Examples : branching and tagging

  Show the branches with 'git branch'
  $ git branch                     # display branches
  * master                         # current branch is marked with *

  Create branch with 'git branch <branch>' or 'git branch <branch> <start-point>'
  start-point can be a branch name or tag name.
  
  $ git branch new-branch-name     # create new branch 'new-branch-name'

  $ git checkout <branch>          # make the current branch <branch>, updating working dir

  $ git checkout -b <new> <start-point> 
                                   # create a new branch <new>, reference <start-point>, 
                                   # check it out.
== 
---- shell
== Git Examples : branching and tagging

  Show the tags with 'git tag -l'

  $ git tag -l                     # display branches
  v2.1                             # the current tags
  v2.2
  v2.3-rc1
  ...




== 
----
== Git Examples : branching and tagging


  tags vs branches:

  Tags are expected to always point to the same revision of a project
  while head on branch is expected to advance.






== 
---- shell
== Git Examples : branching and tagging

  Create a branch from a tag and check it out:
  $ git checkout -b new v2.1       # create the branch, check it out
  $ git branch                     # list the branches
    master                         # master
  * new                            # new branch is selected

  Used to show current branches and to create branches.

  $ git branch                     # display branches
  * master                         # current branch is marked with *

== 

---- shell
== Git Examples : branching and tagging

  remote branches:

  $ git branch                     # show local branches
  * master

  $ git branch -r                  # show remote tracking branches
  origin/HEAD -> origin/master     
  origin/master

  # make a local branch 'my-todo-copy' from remote origin/todo
  $ git checkout -b my-todo-copy origin/todo 


== 
---- shell
== Git Examples : merge

  merge without conflicts: 

  $ git merge branchname          # merge 'branchname' into current branch.

  If no conflicts, this will merge branchname into current branch 
  *and* commit.







== 
---- shell
== Git Examples : merge

  merge with conflicts: 

  $ git merge branchname          # merge 'branchname' into current branch.
    100% (4/4) done
  Auto-merged file.txt
  CONFLICT (content): Merge conflict in file.txt
  Automatic merge failed; fix conflicts and then commit the result.

  At this point there will be conflict markers.  Fix the conflicts
  and then git commit as normal.


  
== 
---- shell
== Git Examples : rebase

  used to migrate a merge to a series of linear patches.

  Suppose that you create a branch "mywork" on a remote-tracking branch "origin", 
  and create some commits on top of it:

  $ git checkout -b mywork origin
  $ vi file.txt
  $ git commit
  $ vi otherfile.txt
  $ git commit
  ...

---- shell
== Git Examples: rebase

  Since no merges, a simple linear sequence:

  o--o--O <-- origin
         \
          a--b--c <-- mywork

+ 
  Add interesting work upstream on origin:

  o--o--O--o--o--o <-- origin
         \
          a--b--c <-- mywork

== 
---- shell
== Git Examples: rebase

  You could pull in results with git pull to make a merge commit:

  o--o--O--o--o--o <-- origin
         \        \
          a--b--c--m <-- mywork

  But, you can keep your history a series of simple commits with no merge
  by rebasing:

  $ git checkout mywork
  $ git rebase origin

    o--o--O--o--o--o <-- origin
                    \
                     a'--b'--c' <-- mywork

== 
---- shell
== Git Examples: rebase
  If there are conflicts during the merge, fix them and use 'git add' to update the
  index with the changes.  Continue with 'git rebase --continue'

  $ git checkout mywork
  $ git rebase origin
  # ... fix conflicts
  $ git add <fixed-conflict-files>
  $ git rebase --continue

  Abort the process with 'git rebase --abort' to return to original mywork branch.




== 
---- shell
== Git Examples: bisect

  Used to identify the history point where code changes lead to failure.

  $ git bisect start
  $ git bisect bad           # mark current version as bad
  $ git bisect good v2.6.13  # last known good version
  Bisecting: 675 revisions left to test after this.
                             # test here, then:
  $ git bisect good          # if this rev is good, or
  $ git bisect bad           # if this rev is bad.
                             # repeat until done.



== 
---- shell
== Git Examples: show and status

   $ git show                # show patch and commit message
   $ git status              # show modified files, untracked files, 
                             # and staged files.

----
== GitHub

  * open42 organization 
    http://github.com/open42

  * plan is limited by private repositories (10).  Any number of users allowed.

  * after you join, you will have a [Switch Context] button on your dashboard
    to switch between open42 and public projects.

  * clone URL looks like:
    ssh:  git@github.com:open42/reponame.git
    http: https://user@github.com/open42/reponame.git

---- shell
== GitHub : push local repo to github

  * Create new project in github gui
  * add remote and push.

  $ cd <existing_git_repo>
  $ git remote add origin git@github.com:spazm/presentations.git
  $ git push -u origin master
+
  Counting objects: 32, done.
  Delta compression using up to 8 threads.
  Compressing objects: 100% (21/21), done.
  Writing objects: 100% (32/32), 6.86 KiB, done.
  Total 32 (delta 5), reused 0 (delta 0)
  To git@github.com:spazm/presentations.git
   * [new branch]      master -> master
  Branch master set up to track remote branch master from origin.
---- shell
== GitHub : push local repo to github

  * make local changes, commit locally, push back to origin.

  <change files ... >
  $ git add file1 file2 file3 ...     # stage changes
  $ git commit -m "new files"         # commit files to local branch
  $ git status                        # show status
  # On branch master
  # Your branch is ahead of 'origin/master' by 3 commits.
  #
  nothing to commit (working directory clean)

  $ git push origin master            # push changes to master branch at origin
                                      # no commit message here, the changes are
                                      # already named.
  Counting objects: 15, done.
  Delta compression using up to 8 threads.
  Compressing objects: 100% (9/9), done.
  Writing objects: 100% (12/12), 1.61 KiB, done.
  Total 12 (delta 3), reused 0 (delta 0)
  To git@github.com:spazm/presentations.git
     9b36eb3..8eee1a3  master -> master

----
== Further Reading
  
  * Git-SVN crash course:
    http://git-scm.com/course/svn.html

  * Git User Manual:
    http://www.kernel.org/pub/software/scm/git/docs/user-manual.html

  * Links at github for github specifics and git general.

---- center


Questions?
---- center


The End
---- center
==  
