# This is a sample Vroom input file. It should help you get started.
#
# Edit this file with your content. Then run `vroom --vroom` to start
# the show!
#
# See `perldoc Vroom` for complete details.
#
---- config
# Basic config options.
title:  Vroom!
indent: 5
height: 10
width:  100
skip:   0

# The following options are for Gvim usage.
vim: gvim
gvimrc: |
  set fuopt=maxhorz,maxvert
  set guioptions=egmLtT
  set guifont=Envy_Code_R:h25
  set guicursor=a:blinkon0-ver25-Cursor
  colorscheme darkblue

---- center

Chef Intro I.
Open42

2011-Mar-28

----
== Chef Topics

* What is Chef?
+* Chef Model
    * client/server
      * node initialization
      * privileges
    * cookbooks, recipies, providers
    * run-lists
    * roles
    * databags
    * repository
+* Knife: the chef tool
+* Examples
    * ec2 commands
    * server query
----
== What is Chef?
----
== Chef Model
----

== Chef Model: Server

* client pull 
* collects metadata about client nodes
* interface to client metadata (search)
* interface to recipe metadata
* interfaces:
  * port 4000 : api requests from clients
  * port 4040 : http UI for examining/modifying metadata

----

== Chef Model: Client

A client is an entitiy that is allowed to talk to the chef server.

* created with 'knife client create'
* created by chef-client during bootstrap
* authenticates via private-key
  * default /etc/chef/client.pem + node_name
  * override client_key and node_name 
    in /etc/chef/client.rb or .chef/knife.rb 
* has name, public_key, admin bool

----

== Chef Model: Node

A Node is an client instance that is managed by Chef.

* has a run-list containing recipies and roles to apply
* has metadata defined on server (via knife)
* has metadata about current system status (collected via ohai)
  * installed chef packages, recipies, roles
  * stats on: kernel rev, cpu flags, os, virtualization, uptime, name, fqdn, 
    ip, filesystem, memory, installed languages, users, groups, ...
  
---- json

% knife client show lemur

---- include raw/knife_client_show_lemur

---- json

% knife node show lemur

---- include raw/knife_node_show_lemur

----

== Chef Model: Client/server : bootstrapping

* Bootstrap
  * shared-private validation.pem
    chef-client will create client certificate from shared key
    /etc/chef/client.pem , /etc/chef/client.rb

+  * how?
    * local checkout of chef-repo to get validation.pem
    * knife bootstrap of new instance from authorized client.

---- shell

== Chef Model: Client/server : bootstrapping

# via ec2 initialization:
% knife ec2 server create [RUN LIST...] (options)

* creates new ec2 server
* connects to new server via ssh to bootstrap
* bootstraps the new server with a base 'chef-client' install, 
  includes validation.pem.
* initializes client run-list with command line [RUN LIST...] arguments
* first run of chef-client creates client.pem and registers new client
  with chef server

* uses 'knife bootstrap'

---- shell

== Chef Model: Client/server : bootstrapping
Should be possible to run bootstrap with knife bootstrap. 

% knife bootstrap FQDN [RUN LIST...] (options)

---- shell

== Chef Model: Client/server : bootstrapping

% knife bootstrap --help                                                                                                                        10 ~
knife bootstrap FQDN [RUN LIST...] (options)
    -N, --node-name NAME             The Chef node name for your new node
    -s, --server-url URL             Chef Server URL
    -k, --key KEY                    API Client Key
    -c, --config CONFIG              The configuration file to use
        --defaults                   Accept default values for all questions
    -d, --distro DISTRO              Bootstrap a distro using a template
    -e, --editor EDITOR              Set the editor to use for interactive commands
    -F, --format FORMAT              Which format to use for output
    -i IDENTITY_FILE                 The SSH identity file used for authentication
        --identity-file
    -l, --log_level LEVEL            Set the log level (debug, info, warn, error, fatal)
    -L, --logfile LOGLOCATION        Set the log file location, defaults to STDOUT
    -n, --no-editor                  Do not open EDITOR, just accept the data as is
    -u, --user USER                  API Client Username
        --prerelease                 Install the pre-release chef gems
    -p, --print-after                Show the data after a destructive operation
    -r, --run-list RUN_LIST          Comma separated list of roles/recipes to apply
    -P, --ssh-password PASSWORD      The ssh password
    -x, --ssh-user USERNAME          The ssh username
        --template-file TEMPLATE     Full path to location of template to use
        --sudo                       Execute the bootstrap via sudo
    -v, --version                    Show chef version
    -y, --yes                        Say yes to all prompts for confirmation
    -h, --help                       Show this message
----

== Chef Model: Client/server : privileges

* Node creates client certificate signed by master certificate 
  (/etc/chef/validation.pem) and pushes to chef server on first run
  of chef-client
* clients have an admin flag.  Normal non-admin users have admin=false.
* non-admin users can only query for information about their own entity
* admin users can query and update information (show clients, modify run-lists)
* if you have the key and client name, you can impersonate the client/node.
  * no passphrases on client certificates
  * keep track of your admin user(s) certificate(s)!
  * can invalidate lost certificates on the server.
----

== Chef Model: cookbooks

* "unit of sharing"
* standard bundle in chef. contains:
  * README.*    
  * metadata.rb/.json 
  * attributes/  configuration attributes
  * definitions/
  * files/ 
  * libraries/
  * recipies/    one or more recipies, default is recipies/default.rb
  * resources/   (light weight resource providers)
  * providers/   (light weight resource providers)
  * templates/   erb template files 

  * lwrp/
----

== Chef Model: metadata and readme

http://wiki.opscode.com/display/chef/Metadata

*metadata.rb: 
    ruby file describing the cookbook
      attribute, grouping, conflicts, depends, description, long_description
      maintainer, maintainer_email, name, provides, recipe, recommends, 
      replaces, supports, suggests, version
    depends is used by chef-server for dependency tracking, make sure it is correct

*metadata.json: 
    json file generated from .rb, this is what is pushed to server

* README: 
    a desrciptive overview. often file-included into metadata.rb as long_description
----

== Chef Model: attributes

"Attributes that are values on Node to set default values used elsewhere in the cookbook."
http://wiki.opscode.com/display/chef/Attributes

"Attributes are Node data such as the IP address, hostname, loaded kernel modules, 
 version of programming languages available on the system and more. 
 New attributes can be dynamically added to the node in a variety of ways."

Good candidates for Attributes are:
 * Cross-Platform abstractions for an application such as the path to a config file.
 * Default values for "tunable" settings ( memory assigned, worker spawn count)
 * Anything else you may want to persist (in node data) between Chef runs.

----

== Chef Model: attributes

* nested configuration data for the cookbook.
* override in a recipie, role, node or databag.
* written as Ruby "mash" (hash where key can be ruby value [ :key ] or string [ "string" ] )

Can be set on a node at 4 levels of precedence:
  * cookbooks
  * environments (Chef 0.10.0 and above)
  * roles
  * nodes
4 levels of gradiation: 
  * automatic    -- internal ohai data, can't override or change.
  * override     -- role specific override 
  * normal       -- node specific override, json file override,
  * default      -- write cookbooks at this level

---- ruby

== Chef Model: attributes

a) node.* is implicit in definition and 
b) accessors are autogenerated

  #cookbooks/apache2/attributes/default.rb
  default[:apache][:dir]          = "/etc/apache2"
  default[:apache][:listen_ports] = [ "80","443" ]

  #cookbooks/apache2/attributes/default.rb
  node.default[:apache][:dir]          = "/etc/apache2"
  node.default[:apache][:listen_ports] = [ "80","443" ]

  #cookbooks/apache2/attributes/default.rb
  default.apache.dir          = "/etc/apache2"
  default.apache.listen_ports = [ "80","443" ]

----

== Chef Model: definitions

"Definitions allow you to create reusable collections of one or more Resources."
http://wiki.opscode.com/display/chef/Definitions

* define new functions/sugar for the DSL 
* chain together multiple resources 
* Definitions are not resources:
    They are replaced by the resources they contain. 
    You cannot notify a definition to take an action 
    - you can only notify the resources it creates.
* see apache example where 'apache_site' is defined.
* Want definition if:
    You are repeating a pattern of resources
    You do not want to send actions directly to this resource 
    - i.e., you never need to notify it

----

== Chef Model: files

"Files that will be placed on the client verbatim."
http://wiki.opscode.com/display/chef/Files

* referenced with 'cookbook_file' resource.
* File Specifity
  * files/ and templates/ dir can have subdirs that match on 
    platform, host, etc.

e.g.

cookbook_file "/usr/local/bin/apache2_module_conf_generate.pl" do
  source "apache2_module_conf_generate.pl"
  mode 0755
  owner "root"
  group "root"
end

files/     #listed in matching order from most to least specific.
  host-example.com
  ubuntu-10.10
  ubuntu
  default
----

== Chef Model: libraries

"Libraries allow you to include arbitrary Ruby code, either to 
 extend Chef's language or to implement your own classes directly. 
 They are the secret sauce that will allow you to plug in to your 
 existing infrastructure and utilize it to inform how your systems are configured."

http://wiki.opscode.com/display/chef/Libraries

Advanced stuff, have yet to see this used.

----

== Chef Model: recipies
"Recipes are the fundamental configuration in Chef. 
 Recipes encapsulate collections of resources which are 
 executed in the order defined to configure the system"
http://wiki.opscode.com/display/chef/Recipes

Basic Rules:
  0. Recipes are stored in Cookbooks.
  1. executed in the order they appear.
  2. evaluated as Ruby code on the node, to find resources to execute. 
  3. Recipes from other Cookbooks can be included with include_recipe.
  4. All the attributes of the current Node are available via the node object.
  5. namespaced by cookbook::recipie

----

== Chef Model: recipies

Applied to the run-list of a node or role.
e.g.
    { run_list : [
        "recipe[apache2]",
        "recipe[apache2::mod_ssl]",
    ]}

Apply to node:
  % knife node run_list add MYNODE "recipe[apache2]"

----

== Anatomy of a Chef Run
http://wiki.opscode.com/display/chef/Anatomy+of+a+Chef+Run

----

== Chef Model: resources

Chef manages Resources on the node. 

Resources can be many things:
  * packages
  * services
  * users
  * files
  * directories
  * And more. 

* They are the "bread and butter of recipes."
* Configured by providers based on the platform of the node

http://wiki.opscode.com/display/chef/Resources

---- ruby

== Chef Model: resources
Examples:

#ignore_failure
gem_package "syntax" do
  action :install
  ignore_failure true
end

#provider
package "some_package" do
 provider Chef::Provider::Package::Rubygems
end

#supports
service "apache" do
  supports :restart => true, :reload => true
  action :enable
end

#Provider and Supports
service "some_service" do
  provider Chef::Provider::Service::Upstart
  supports :status => true, :restart => true, :reload => true
  action [ :enable, :start ]
end

----
== Chef Model: providers

Providers take a resource, compare that resource to the current state of the part 
of the system it is managing, and then takes the Action specified in the resource.
They are the way that Chef supports multiple platforms with a single Resource.

http://wiki.opscode.com/display/chef/Providers

* heavy lifting to configure resources, based on the platform of the node. 
* idempotent actions to configure a resource as it is declared in the recipe.
* generally written by the Chef team.  
  * build your own using LWRP (Light Weight Resources and Providers)
----

== Chef Model: providers

For example, given a resource such as:

  directory "/tmp/monkey" do
    owner "root"
    group "root"
    mode 0755
    action :create
  end

This would:
* Look up the provider for a directory resource: Chef::Provider::Directory
* Call load_current_resource, which creates a new directory["/tmp/monkey"] resource, 
  based on the directories current state (which goes in @current_resource).
* Call action_create, which is responsible making sure the directory exists, 
  and that it's attributes are correct.
* If we changed the directory in any way, we mark the resource as updated.

----

== Chef Model: templates

"A template is a file that has been marked up to include variables (or more complex logic) 
 using Erubis (.erb)"
http://wiki.opscode.com/display/chef/Templates

* Used "all the time"
* utilize by adding a 'template' resource to a 'recipe'.
* template location specificity
  * subdirs of template are compared against host and uname
* Variables
  * all variables listed in the 'resources variables attribute' are passed to template
  * contents of 'node|Nodes' passed to template
  * accessible as instance variables within the template.
* ERB templates
  <%= ... %>
  http://www.kuwata-lab.com/erubis/users-guide.html

---- ruby

== Chef Model: templates
== template example

node[:fqdn] = "latte"
template "/tmp/foo" do
  source "foo.erb"
  variables({
    :x_men => "are keen"
  })
end


---- ruby

== Chef Model: templates
== erb example

The node <%= node[:fqdn] %> thinks the x-men <%= @x_men %>

== renders to:

The node latte thinks the x-men are keen

----

== Chef Model: run-lists
----

== Chef Model: roles
----

== Chef Model: databags
----

== Chef Model: repository
----

== Knife : The Chef Tool
----

== Examples
----

== Examples: ec2 commands
----

== The End
